@page "/clusters"
@using Microsoft.AspNetCore.SignalR.Client
@using Newtonsoft.Json
@using Newtonsoft.Json.Linq
@implements IDisposable

@inject HttpClient Http
@inject NavigationManager _navi
@inject HubConnection _hub

<h1>Clusters</h1>

<EditClusterModal @ref="_modal" OnHideModal="@OnHideModal" OnSaveChanges="@OnSaveChanges" />

<Container class="clusters" Fluid="true">
    <ClusterNewCard OnNewClusterCb="@OnNewClusterClicked" />

    @foreach (var cluster in _clusters)
    {
        <ClusterCard Cluster=cluster
                     OnEditCluster="@(()=>_modal.EditCluster(cluster, false))"
                     OnConnect="@(()=>OnConnect(cluster))">
        </ClusterCard>
    }
</Container>

<p>Welcome @_status to Kraft</p>

@code {
    private EditClusterModal _modal;

    private Kraft.Shared.Cluster[] _clusters = new Kraft.Shared.Cluster[] { };

    private string _status = "";

    private List<string> messages = new List<string>();

    protected override async Task OnInitializedAsync()
    {
        _hub.On<string, string>("ReceiveMessage", (user, message) =>
        {
            var encodedMsg = $"{user}: {message}";
            messages.Add(encodedMsg);
            StateHasChanged();
        });

        _hub.On<Kraft.Shared.Beat>("HeartBeat", o =>
        {
            _status = o.Payload;
            StateHasChanged();
        });

    _hub.On<string>("Welcome", connectionId =>
    {
        _status = connectionId;

        StateHasChanged();
    });


    _hub.Reconnecting += e => {
        _status = "reconnecting";
        StateHasChanged();
        return Task.CompletedTask;
    };

    _hub.Closed += async(e)=> {
        _status = $"Hub closed, {e}";

        StateHasChanged();
        await _hub.StartAsync();
    };

    var t0 =_hub.StartAsync();
    var t1 = Http.GetFromJsonAsync<IEnumerable<Kraft.Shared.Cluster>>("api/Clusters").ContinueWith(
        t=> {
            _clusters = t.Result.ToArray();
        });
        // always call StateHasChanged!
    await Task.WhenAll(t0, t1);
}


public bool IsConnected =>
    _hub.State == HubConnectionState.Connected;

public void Dispose()
{
    _ = _hub.DisposeAsync();
}

private void OnConnect(Kraft.Shared.Cluster cluster)
{
    Console.WriteLine("Hello world {0}", cluster.Name);

    _navi.NavigateTo($"clusters/{cluster.Id}");
}

private void OnNewClusterClicked(MouseEventArgs arg)
{
    _modal.EditCluster(new Kraft.Shared.Cluster(), true);
    //StateHasChanged();
}

private void OnHideModal()
{
    //StateHasChanged();
}

private async Task OnSaveChanges(Kraft.Shared.Cluster cluster)
{
    if (cluster.Id is null)
    {
        cluster.Id = Guid.NewGuid().ToString();
        await Http.PostAsJsonAsync<Kraft.Shared.Cluster>("api/Clusters", cluster);
    }
    else
    {
        await Http.PutAsJsonAsync<Kraft.Shared.Cluster>($"api/Clusters/{cluster.Id}", cluster);
    }

    _clusters = await Http.GetFromJsonAsync<Kraft.Shared.Cluster[]>("api/Clusters");

    StateHasChanged();
}
}
