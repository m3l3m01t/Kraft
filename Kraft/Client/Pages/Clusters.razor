@page "/clusters"
@using Microsoft.AspNetCore.SignalR.Client

@using Newtonsoft.Json;
@using Newtonsoft.Json.Linq;
@implements IDisposable

@inject HttpClient Http
@inject NavigationManager NavigationManager

<h3>Clusters</h3>

<EditClusterModal @ref="_modal" OnHideModal="@OnHideModal" OnSaveChanges="@OnSaveChanges" />

<Container class="clusters" Fluid="true">
    <ClusterNewCard OnNewClusterCb="@OnNewClusterClicked" />

    @foreach (var cluster in _clusters)
    {
        <ClusterCard Cluster=cluster
                     OnEditCluster="@(()=>_modal.EditCluster(cluster, false))"
                     OnConnect="@(()=>OnConnect(cluster))">
        </ClusterCard>
    }
</Container>

<p>Welcome @_status to Kraft</p>

@code {
    private EditClusterModal _modal;

    private Kraft.Shared.Cluster[] _clusters = new Kraft.Shared.Cluster[] { };

    private string _status = "";

    private HubConnection hubConnection;
    private List<string> messages = new List<string>();
    private string userInput;
    private string messageInput;

    protected override async Task OnInitializedAsync()
    {
        hubConnection = new HubConnectionBuilder()
            .WithUrl(NavigationManager.ToAbsoluteUri("/khub"))
            .WithAutomaticReconnect(new [] {TimeSpan.FromSeconds(1)})
            .Build();

        hubConnection.On<string, string>("ReceiveMessage", (user, message) =>
        {
            var encodedMsg = $"{user}: {message}";
            messages.Add(encodedMsg);
            StateHasChanged();
        });

        hubConnection.On<Kraft.Shared.Beat>("HeartBeat", o =>
        {
            var jObj = JObject.FromObject(o);
            _status = jObj.ToString();

            StateHasChanged();
        });

        hubConnection.On<string>("Welcome", connectionId =>
        {
            _status = connectionId;
            StateHasChanged();
        });

        await hubConnection.StartAsync();

        _clusters = await Http.GetFromJsonAsync<Kraft.Shared.Cluster[]>("api/Clusters");

        // always call StateHasChanged!
        StateHasChanged();
    }

    Task Send() =>
        hubConnection.SendAsync("SendMessage", userInput, messageInput);

    public bool IsConnected =>
        hubConnection.State == HubConnectionState.Connected;

    public void Dispose()
    {
        _ = hubConnection.DisposeAsync();
    }

    private void OnConnect(Kraft.Shared.Cluster cluster)
    {
        Console.WriteLine("Hello world {0}", cluster.Name);

        NavigationManager.NavigateTo($"clusters/{cluster.Id}");
    }

    private void OnNewClusterClicked(MouseEventArgs arg)
    {
        var cluster = new Kraft.Shared.Cluster { Name = "New Cluster" };
        _modal.EditCluster(cluster, true);
        //StateHasChanged();
    }

    private void OnHideModal()
    {
        //StateHasChanged();
    }

    private async Task OnSaveChanges(Kraft.Shared.Cluster cluster)
    {
        if (cluster.Id is null)
        {
            cluster.Id = Guid.NewGuid().ToString();
            await Http.PostAsJsonAsync<Kraft.Shared.Cluster>("api/Clusters", cluster);
        }
        else
        {
            await Http.PutAsJsonAsync<Kraft.Shared.Cluster>($"api/Clusters/{cluster.Id}", cluster);
        }

        _clusters = await Http.GetFromJsonAsync<Kraft.Shared.Cluster[]>("api/Clusters");

        StateHasChanged();
    }
}
