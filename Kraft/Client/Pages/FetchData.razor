@page "/fetchdata"
@using Kraft.Shared
@inject HttpClient Http

<h1>Weather forecast</h1>

<p>This component demonstrates fetching data from the server.</p>

<DataGrid TItem="WeatherForecast"
          Data="@forecasts"
          ReadData="@OnReadData"
          TotalItems="@_total"
          @bind-SelectedRow="@_selectedForecasts"
          >
    <DataGridCommandColumn TItem="WeatherForecast" />
    <DataGridColumn TItem="WeatherForecast" Field="@nameof(WeatherForecast.Summary)" Caption="Summary" Sortable="false" />
    <DataGridColumn TItem="WeatherForecast" Field="@nameof(WeatherForecast.TemperatureC)" Caption="Temp C" Editable="true" />
    <DataGridColumn TItem="WeatherForecast" Field="@nameof(WeatherForecast.TemperatureF)" Caption="Temp F" Editable="true" />
    <DataGridColumn TItem="WeatherForecast" Field="@nameof(WeatherForecast.Date)" Caption="Timestamp" Editable="true" />
</DataGrid>

@code {
    private WeatherForecast[] forecasts;
    private WeatherForecast _selectedForecasts;
    private int _total = 0;

    protected override Task OnInitializedAsync()
    {
        return Task.CompletedTask;
    }

    async Task OnReadData(DataGridReadDataEventArgs<WeatherForecast> e)
    {
        // this can be call to anything, in this case we're calling a fictional api
        forecasts = await Http.GetFromJsonAsync<WeatherForecast[]>("WeatherForecast");

        _total = forecasts.Length;

        // always call StateHasChanged!
        StateHasChanged();
    }
}
